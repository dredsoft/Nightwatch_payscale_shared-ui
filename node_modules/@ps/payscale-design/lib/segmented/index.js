'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function Segment(props) {
    var text = props.text,
        active = props.active,
        value = props.value,
        onChange = props.onChange,
        id = props.id;


    return _react2.default.createElement(
        'a',
        { className: active ? 'pxl-segment active' : 'pxl-segment', onClick: onChange.bind(null, id, value) },
        text
    );
}

Segment.propTypes = {
    active: _propTypes2.default.bool,
    id: _propTypes2.default.string,
    onChange: _propTypes2.default.func,
    text: _propTypes2.default.string,
    value: _propTypes2.default.any
};

var Segmented = function (_React$Component) {
    _inherits(Segmented, _React$Component);

    function Segmented() {
        _classCallCheck(this, Segmented);

        return _possibleConstructorReturn(this, (Segmented.__proto__ || Object.getPrototypeOf(Segmented)).apply(this, arguments));
    }

    _createClass(Segmented, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                value = _props.value,
                options = _props.options,
                onChange = _props.onChange,
                id = _props.id,
                className = _props.className,
                justified = _props.justified;


            var optionComponents = options.map(function (o) {
                return _react2.default.createElement(Segment, {
                    key: o.value,
                    id: id, text: o.text,
                    value: o.value,
                    active: o.value === value,
                    onChange: onChange });
            });

            return _react2.default.createElement(
                'div',
                { className: justified ? 'pxl-segmented pxl-segmented-justified ' + className : 'pxl-segmented ' + className, 'data-toggle': 'buttons' },
                optionComponents
            );
        }
    }]);

    return Segmented;
}(_react2.default.Component);

exports.default = Segmented;


Segmented.propTypes = {
    className: _propTypes2.default.string,
    id: _propTypes2.default.string,
    justified: _propTypes2.default.bool,
    onChange: _propTypes2.default.func,
    options: _propTypes2.default.array,
    value: _propTypes2.default.any
};

Segmented.defaultProps = {
    className: '',
    onChange: function onChange() {},
    justified: false
};

module.exports = Segmented;