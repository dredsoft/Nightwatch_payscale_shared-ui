'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autocomplete = require('../autocomplete');

var _autocomplete2 = _interopRequireDefault(_autocomplete);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CollapsedAutocomplete = function (_React$Component) {
    _inherits(CollapsedAutocomplete, _React$Component);

    function CollapsedAutocomplete(props) {
        _classCallCheck(this, CollapsedAutocomplete);

        var _this = _possibleConstructorReturn(this, (CollapsedAutocomplete.__proto__ || Object.getPrototypeOf(CollapsedAutocomplete)).call(this, props));

        _this.expand = _this.expand.bind(_this);
        _this.collapse = _this.collapse.bind(_this);

        _this.state = {
            collapsed: true
        };
        return _this;
    }

    _createClass(CollapsedAutocomplete, [{
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            var collapsed = this.state.collapsed;


            if (!collapsed) {
                this.autocomplete.autosuggest.input.focus();
            }
        }
    }, {
        key: 'expand',
        value: function expand() {
            this.setState({ collapsed: false });
        }
    }, {
        key: 'collapse',
        value: function collapse() {
            this.setState({ collapsed: true });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                className = _props.className,
                collapsedText = _props.collapsedText,
                others = _objectWithoutProperties(_props, ['className', 'collapsedText']);

            var collapsed = this.state.collapsed;


            var inputProps = {
                onBlur: this.collapse
            };

            return _react2.default.createElement(
                'div',
                { className: className },
                _react2.default.createElement(
                    'a',
                    { onClick: this.expand, className: collapsed ? '' : 'pxl-hidden' },
                    collapsedText
                ),
                _react2.default.createElement(_autocomplete2.default, _extends({
                    ref: function ref(ac) {
                        _this2.autocomplete = ac;
                    },
                    inputProps: inputProps,
                    className: collapsed ? 'pxl-hidden' : ''
                }, others))
            );
        }
    }]);

    return CollapsedAutocomplete;
}(_react2.default.Component);

exports.default = CollapsedAutocomplete;


CollapsedAutocomplete.propTypes = {
    className: _propTypes2.default.string,
    collapsedText: _propTypes2.default.string,
    extractData: _propTypes2.default.func,
    id: _propTypes2.default.string.isRequired,
    max: _propTypes2.default.number,
    onChange: _propTypes2.default.func.isRequired,
    options: _propTypes2.default.array,
    placeholder: _propTypes2.default.string,
    text: _propTypes2.default.string,
    url: _propTypes2.default.string,
    value: _propTypes2.default.any
};

CollapsedAutocomplete.defaultProps = {
    className: '',
    value: ''
};