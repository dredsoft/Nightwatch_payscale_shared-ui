'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactTagsinput = require('react-tagsinput');

var _reactTagsinput2 = _interopRequireDefault(_reactTagsinput);

var _options = require('../options');

var _options2 = _interopRequireDefault(_options);

var _reactAutosuggest = require('react-autosuggest');

var _reactAutosuggest2 = _interopRequireDefault(_reactAutosuggest);

var _he = require('he');

var _he2 = _interopRequireDefault(_he);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function TagsInputOptions(props) {
    var optionsType = props.optionsType,
        options = props.options,
        id = props.id,
        onChange = props.onChange,
        maxShown = props.maxShown,
        initShown = props.initShown;


    if (optionsType === 'none') {
        return _react2.default.createElement('noscript', null);
    }

    return _react2.default.createElement(_options2.default, {
        id: id + 'options',
        loadMore: true,
        type: optionsType,
        options: options,
        onChange: onChange,
        maxShown: maxShown,
        initShown: initShown,
        className: 'pxl-margin-top-xsmall',
        syncOnUpdate: true });
}

TagsInputOptions.propTypes = {
    id: _propTypes2.default.string,
    initShown: _propTypes2.default.number,
    maxShown: _propTypes2.default.number,
    onChange: _propTypes2.default.func,
    options: _propTypes2.default.array,
    optionsType: _propTypes2.default.oneOf(['none', 'checklist', 'pills'])
};

var TagsInputAutocomplete = function (_React$Component) {
    _inherits(TagsInputAutocomplete, _React$Component);

    function TagsInputAutocomplete(props) {
        _classCallCheck(this, TagsInputAutocomplete);

        var _this = _possibleConstructorReturn(this, (TagsInputAutocomplete.__proto__ || Object.getPrototypeOf(TagsInputAutocomplete)).call(this, props));

        _this._handleOnSuggestionsFetchRequested = _this._handleOnSuggestionsFetchRequested.bind(_this);
        _this._handleOnSuggestionsClearRequested = _this._handleOnSuggestionsClearRequested.bind(_this);
        _this._handleSuggestionValue = _this._handleSuggestionValue.bind(_this);
        _this._handleRenderSuggestion = _this._handleRenderSuggestion.bind(_this);
        _this._handleRenderLayout = _this._handleRenderLayout.bind(_this);
        _this._handleOptionsOnClick = _this._handleOptionsOnClick.bind(_this);

        _this.state = {
            suggestions: _this.props.suggestions.slice(0, _this.props.maxSuggestions)
        };
        return _this;
    }

    _createClass(TagsInputAutocomplete, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var suggestions = nextProps.suggestions,
                maxSuggestions = nextProps.maxSuggestions;


            this.setState({
                suggestions: suggestions.slice(0, maxSuggestions)
            });
        }
    }, {
        key: '_handleOnSuggestionsFetchRequested',
        value: function _handleOnSuggestionsFetchRequested(e) {
            var me = this;
            var _props = this.props,
                url = _props.url,
                extractData = _props.extractData,
                maxTags = _props.maxTags;


            if (url) {
                url = url.replace('{search}', encodeURIComponent(e.value));

                var request = new XMLHttpRequest();
                request.open('GET', url, true);
                request.onload = function () {
                    if (request.status >= 200 && request.status < 400) {
                        var resp = request.responseText;
                        var data = extractData ? extractData(JSON.parse(resp)) : JSON.parse(resp);
                        me.setState({ suggestions: data.slice(0, maxTags) });
                    } else {
                        me.setState({ suggestions: [] });
                    }
                };

                request.onerror = function () {
                    me.setState({ suggestions: [] });
                };

                request.send();
            }
        }
    }, {
        key: '_handleOnSuggestionsClearRequested',
        value: function _handleOnSuggestionsClearRequested() {
            this.setState({
                suggestions: []
            });
        }
    }, {
        key: '_handleSuggestionValue',
        value: function _handleSuggestionValue(suggestion) {
            return _he2.default.decode(suggestion);
        }
    }, {
        key: '_handleRenderSuggestion',
        value: function _handleRenderSuggestion(suggestion) {
            return _react2.default.createElement(
                'span',
                null,
                _he2.default.decode(suggestion)
            );
        }
    }, {
        key: '_handleShouldRenderSuggestions',
        value: function _handleShouldRenderSuggestions(value) {
            return value && value.trim().length > 0;
        }
    }, {
        key: '_handleRenderLayout',
        value: function _handleRenderLayout(tagComponents, inputComponent) {
            var _this2 = this;

            return _react2.default.createElement(
                'div',
                { onClick: function onClick() {
                        _this2.autocomplete.input.focus();
                    } },
                tagComponents,
                inputComponent
            );
        }
    }, {
        key: '_handleOptionsOnClick',
        value: function _handleOptionsOnClick(uid, values) {
            var _props2 = this.props,
                onChange = _props2.onChange,
                value = _props2.value,
                maxTags = _props2.maxTags,
                id = _props2.id;

            var newValue = value.concat(values);

            if (maxTags === -1 || newValue.length <= maxTags) {
                onChange(id, newValue);
            }
        }
    }, {
        key: 'renderTag',
        value: function renderTag(props) {
            var tag = props.tag,
                key = props.key,
                disabled = props.disabled,
                onRemove = props.onRemove,
                classNameRemove = props.classNameRemove,
                getTagDisplayValue = props.getTagDisplayValue,
                other = _objectWithoutProperties(props, ['tag', 'key', 'disabled', 'onRemove', 'classNameRemove', 'getTagDisplayValue']);

            return _react2.default.createElement(
                'span',
                _extends({ key: key }, other),
                _he2.default.decode(getTagDisplayValue(tag)),
                !disabled && _react2.default.createElement('a', { className: classNameRemove, onClick: function onClick(e) {
                        return onRemove(key);
                    } })
            );
        }
    }, {
        key: 'renderAutocompleteInput',
        value: function renderAutocompleteInput(args, props) {
            var _this3 = this;

            var addTag = props.addTag,
                onChange = props.onChange,
                other = _objectWithoutProperties(props, ['addTag', 'onChange']);

            var id = args.id,
                suggestions = args.suggestions,
                placeholder = args.placeholder,
                fetch = args.fetch,
                clear = args.clear,
                value = args.value,
                render = args.render,
                shouldRender = args.shouldRender;

            var handleOnChange = function handleOnChange(e, _ref) {
                var newValue = _ref.newValue,
                    method = _ref.method;

                if (method === 'enter') {
                    e.preventDefault();
                } else {
                    onChange(e);
                }
            };

            return _react2.default.createElement(_reactAutosuggest2.default, {
                id: id,
                suggestions: suggestions,
                onSuggestionsFetchRequested: fetch,
                onSuggestionsClearRequested: clear,
                getSuggestionValue: value,
                renderSuggestion: render,
                shouldRenderSuggestions: shouldRender,
                inputProps: _extends({}, other, { onChange: handleOnChange, placeholder: placeholder, id: id }),
                onSuggestionSelected: function onSuggestionSelected(e, _ref2) {
                    var suggestion = _ref2.suggestion;

                    addTag(suggestion);
                },
                ref: function ref(ac) {
                    _this3.autocomplete = ac;
                } });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props3 = this.props,
                value = _props3.value,
                onChange = _props3.onChange,
                id = _props3.id,
                className = _props3.className,
                placeholder = _props3.placeholder,
                maxTags = _props3.maxTags,
                tagClassName = _props3.tagClassName,
                addKeys = _props3.addKeys;

            var _props4 = this.props,
                options = _props4.options,
                other = _objectWithoutProperties(_props4, ['options']);

            var suggestions = this.state.suggestions;


            var filteredOptions = options.filter(function (o) {
                return value.indexOf(o) === -1;
            });

            var args = {
                id: id,
                suggestions: suggestions,
                placeholder: placeholder,
                fetch: this._handleOnSuggestionsFetchRequested,
                clear: this._handleOnSuggestionsClearRequested,
                value: this._handleSuggestionValue,
                render: this._handleRenderSuggestion,
                shouldRender: this._handleShouldRenderSuggestions
            };

            return _react2.default.createElement(
                'div',
                { className: className },
                _react2.default.createElement(_reactTagsinput2.default, {
                    value: value,
                    onChange: onChange.bind(null, id),
                    renderInput: this.renderAutocompleteInput.bind(this, args),
                    addKeys: addKeys,
                    onlyUnique: true,
                    maxTags: maxTags,
                    tagProps: {
                        className: tagClassName + ' pxl-tag',
                        classNameRemove: 'pxl-tag-remove'
                    },
                    addOnBlur: true,
                    renderTag: this.renderTag,
                    renderLayout: this._handleRenderLayout }),
                _react2.default.createElement(TagsInputOptions, _extends({}, other, {
                    options: filteredOptions,
                    onChange: this._handleOptionsOnClick }))
            );
        }
    }]);

    return TagsInputAutocomplete;
}(_react2.default.Component);

exports.default = TagsInputAutocomplete;


TagsInputAutocomplete.propTypes = {
    addKeys: _propTypes2.default.array,
    className: _propTypes2.default.string,
    extractData: _propTypes2.default.func,
    id: _propTypes2.default.string.isRequired,
    maxSuggestions: _propTypes2.default.number,
    maxTags: _propTypes2.default.number,
    onChange: _propTypes2.default.func,
    options: _propTypes2.default.array,
    optionsType: _propTypes2.default.oneOf(['none', 'checklist', 'pills']),
    placeholder: _propTypes2.default.string,
    suggestions: _propTypes2.default.array,
    tagClassName: _propTypes2.default.string,
    url: _propTypes2.default.string,
    value: _propTypes2.default.array
};

TagsInputAutocomplete.defaultProps = {
    addKeys: [9, 13, 188],
    className: '',
    maxSuggestions: 5,
    maxTags: -1,
    onChange: function onChange() {},
    options: [],
    optionsType: 'none',
    suggestions: [],
    tagClassName: 'pxl-pill pxl-pill-selected',
    url: '',
    value: []
};