'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _formGroup = require('../form-group');

var _formGroup2 = _interopRequireDefault(_formGroup);

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ConfirmInput = function (_React$Component) {
    _inherits(ConfirmInput, _React$Component);

    function ConfirmInput(props) {
        _classCallCheck(this, ConfirmInput);

        var _this = _possibleConstructorReturn(this, (ConfirmInput.__proto__ || Object.getPrototypeOf(ConfirmInput)).call(this, props));

        _this._handleOnChange = _this._handleOnChange.bind(_this);
        _this._valuesMatch = _this._valuesMatch.bind(_this);

        var state = {};
        state[props.id + 'Input'] = props.value;
        _this.state = state;
        return _this;
    }

    _createClass(ConfirmInput, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if (nextProps.id !== this.props.id) {
                var updateState = {};
                updateState[nextProps.id + 'Input'] = nextProps.value;
                this.setState(updateState);
            }
        }
    }, {
        key: '_valuesMatch',
        value: function _valuesMatch(cid, value) {
            var id = this.props.id;


            if (cid === id + 'Input') {
                return value === this.state[id + 'Confirm'];
            }
            return value === this.state[id + 'Input'];
        }
    }, {
        key: '_handleOnChange',
        value: function _handleOnChange(cid, value) {
            var _props = this.props,
                id = _props.id,
                onChange = _props.onChange,
                errorText = _props.errorText;

            var match = this._valuesMatch(cid, value);
            var confirmedValue = match ? value : '';
            var updateState = {};
            updateState[cid] = value;

            if (this.state[id + 'Confirm'] && !match) {
                updateState.error = errorText;
            } else {
                updateState.error = null;
            }

            this.setState(updateState);
            onChange(id, confirmedValue);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                id = _props2.id,
                inputText = _props2.inputText,
                inputError = _props2.inputError,
                inputType = _props2.inputType,
                confirmInputText = _props2.confirmInputText,
                labelClassName = _props2.labelClassName,
                errorClassName = _props2.errorClassName,
                className = _props2.className,
                inputClassName = _props2.inputClassName;
            var error = this.state.error;


            return _react2.default.createElement(
                'div',
                { id: id, className: className },
                _react2.default.createElement(
                    _formGroup2.default,
                    { error: inputError, htmlFor: id + 'Input', text: inputText, labelClassName: labelClassName },
                    _react2.default.createElement(_input2.default, {
                        id: id + 'Input',
                        type: inputType,
                        className: inputClassName,
                        onChange: this._handleOnChange,
                        value: this.state[id + 'Input'] })
                ),
                _react2.default.createElement(
                    _formGroup2.default,
                    { htmlFor: id + 'Confirm', error: error, text: confirmInputText, labelClassName: labelClassName, errorClassName: errorClassName },
                    _react2.default.createElement(_input2.default, {
                        id: id + 'Confirm',
                        type: inputType,
                        className: inputClassName,
                        onChange: this._handleOnChange,
                        value: this.state[id + 'Confirm'] })
                )
            );
        }
    }]);

    return ConfirmInput;
}(_react2.default.Component);

exports.default = ConfirmInput;


ConfirmInput.propTypes = {
    className: _propTypes2.default.string,
    confirmInputText: _propTypes2.default.string,
    errorClassName: _propTypes2.default.string,
    errorText: _propTypes2.default.string,
    id: _propTypes2.default.string,
    inputClassName: _propTypes2.default.string,
    inputError: _propTypes2.default.string,
    inputText: _propTypes2.default.string,
    inputType: _propTypes2.default.string,
    labelClassName: _propTypes2.default.string,
    onChange: _propTypes2.default.func,
    value: _propTypes2.default.string
};

ConfirmInput.defaultProps = {
    className: '',
    errorClassName: '',
    id: '',
    inputClassName: '',
    inputType: 'text',
    labelClassName: '',
    onChange: function onChange() {},
    value: ''
};

module.exports = ConfirmInput;