'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

var _options = require('../options');

var _options2 = _interopRequireDefault(_options);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function OptionsEmptyText(props) {
    if (!props.options || props.options.length === 0) {
        return _react2.default.createElement(
            'p',
            null,
            props.text
        );
    }
    return _react2.default.createElement('noscript', null);
}

OptionsEmptyText.propTypes = {
    options: _propTypes2.default.array,
    text: _propTypes2.default.string
};

var OptionsAutocomplete = function (_React$Component) {
    _inherits(OptionsAutocomplete, _React$Component);

    function OptionsAutocomplete(props) {
        _classCallCheck(this, OptionsAutocomplete);

        var _this = _possibleConstructorReturn(this, (OptionsAutocomplete.__proto__ || Object.getPrototypeOf(OptionsAutocomplete)).call(this, props));

        _this._handleOnChangeInput = _this._handleOnChangeInput.bind(_this);
        _this._handleOnChangeOptions = _this._handleOnChangeOptions.bind(_this);

        _this.state = {
            initialValue: props.value,
            inputValue: props.value,
            options: [],
            optionsValue: ''
        };
        return _this;
    }

    _createClass(OptionsAutocomplete, [{
        key: '_handleOnChangeInput',
        value: function _handleOnChangeInput(id, value) {
            var _props = this.props,
                appendInitValue = _props.appendInitValue,
                appendInitValueText = _props.appendInitValueText,
                initShown = _props.initShown,
                onChange = _props.onChange,
                onInputChange = _props.onInputChange,
                url = _props.url,
                extractData = _props.extractData;
            var _state = this.state,
                initialValue = _state.initialValue,
                optionsValue = _state.optionsValue;

            var newOptionsValue = optionsValue;
            var valueInitialValueComparison = '' + value + appendInitValueText;
            var me = this;

            this.setState({ inputValue: value });

            if (onInputChange) {
                onInputChange(id, value);
            }

            if (url && value && value.length > 0) {
                url = url.replace('{search}', encodeURIComponent(value));

                (0, _isomorphicFetch2.default)(url).then(function (response) {
                    switch (response.status) {
                        case 200:
                            return response.json();
                        default:
                            return null;
                    }
                }).then(function (data) {
                    if (data) {
                        if (extractData) {
                            data = extractData(data);
                        }

                        if (appendInitValue && data.length > 0 && initialValue && initialValue.length > 0) {
                            data.slice(0, initShown - 1);
                            data.push('' + initialValue + appendInitValueText);
                        }

                        data.forEach(function (currentValue) {
                            if (value.toLowerCase() === currentValue.toLowerCase() || valueInitialValueComparison.toLowerCase() === currentValue.toLowerCase()) {
                                newOptionsValue = currentValue;
                                onChange(id, value);
                            }
                        });

                        if (newOptionsValue && newOptionsValue !== '' && data.indexOf(newOptionsValue) === -1) {
                            newOptionsValue = '';
                            onChange(id, initialValue);
                        }
                    }

                    me.setState({ options: data, optionsValue: newOptionsValue });
                });
            }
        }
    }, {
        key: '_handleOnChangeOptions',
        value: function _handleOnChangeOptions(cid, value) {
            var _props2 = this.props,
                appendInitValue = _props2.appendInitValue,
                appendInitValueText = _props2.appendInitValueText,
                id = _props2.id,
                onChange = _props2.onChange;
            var initialValue = this.state.initialValue;

            var optionsValue = value;

            if (appendInitValue && value === '' + initialValue + appendInitValueText) {
                value = initialValue;
                optionsValue = '' + initialValue + appendInitValueText;
            }

            this.setState({ optionsValue: optionsValue });
            onChange(id, value);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props3 = this.props,
                optionsEmptyText = _props3.optionsEmptyText,
                loadMore = _props3.loadMore,
                className = _props3.className,
                optionsClassName = _props3.optionsClassName,
                url = _props3.url,
                initShown = _props3.initShown,
                options = _props3.options,
                appendInitValue = _props3.appendInitValue,
                extractData = _props3.extractData,
                appendInitValueText = _props3.appendInitValueText,
                others = _objectWithoutProperties(_props3, ['optionsEmptyText', 'loadMore', 'className', 'optionsClassName', 'url', 'initShown', 'options', 'appendInitValue', 'extractData', 'appendInitValueText']);

            var _state2 = this.state,
                inputValue = _state2.inputValue,
                optionsValue = _state2.optionsValue;

            options = this.state.options;

            return _react2.default.createElement(
                'div',
                { className: className },
                _react2.default.createElement(_input2.default, _extends({}, others, { className: 'pxl-margin-bottom-medium', value: inputValue, onChange: this._handleOnChangeInput, autoComplete: 'off' })),
                _react2.default.createElement(_options2.default, _extends({}, others, {
                    className: optionsClassName,
                    options: options,
                    syncOptions: false,
                    multiValue: false,
                    type: 'radio',
                    value: optionsValue,
                    loadMore: loadMore,
                    onChange: this._handleOnChangeOptions })),
                _react2.default.createElement(OptionsEmptyText, { text: optionsEmptyText, options: options })
            );
        }
    }]);

    return OptionsAutocomplete;
}(_react2.default.Component);

exports.default = OptionsAutocomplete;


OptionsAutocomplete.propTypes = {
    appendInitValue: _propTypes2.default.bool,
    appendInitValueText: _propTypes2.default.string,
    className: _propTypes2.default.string,
    extractData: _propTypes2.default.func,
    id: _propTypes2.default.string,
    initShown: _propTypes2.default.number,
    loadMore: _propTypes2.default.bool,
    onChange: _propTypes2.default.func,
    onInputChange: _propTypes2.default.func,
    options: _propTypes2.default.array,
    optionsClassName: _propTypes2.default.string,
    optionsEmptyText: _propTypes2.default.string,
    placeholder: _propTypes2.default.string,
    url: _propTypes2.default.string,
    value: _propTypes2.default.string
};

OptionsAutocomplete.defaultProps = {
    appendInitValue: true,
    appendInitValueText: '',
    className: '',
    initShown: 14,
    loadMore: false,
    options: [],
    optionsClassName: '',
    optionsEmptyText: '',
    value: []
};