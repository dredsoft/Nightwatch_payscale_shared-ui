'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dropdown = function (_React$Component) {
    _inherits(Dropdown, _React$Component);

    function Dropdown(props) {
        _classCallCheck(this, Dropdown);

        var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this, props));

        _this.state = {
            open: false
        };

        _this.toggle = _this.toggle.bind(_this);
        _this.handleMouseEvent = _this.handleMouseEvent.bind(_this);
        _this.handleBlurEvent = _this.handleBlurEvent.bind(_this);
        _this.hasFocus = _this.hasFocus.bind(_this);
        return _this;
    }

    _createClass(Dropdown, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            document.addEventListener('mouseup', this.handleMouseEvent);

            this.dropdown.addEventListener('focusout', this.handleBlurEvent);
        }
    }, {
        key: 'hasFocus',
        value: function hasFocus(target) {
            // when component unmounts, ref becomes null
            if (!this.dropdown) {
                return false;
            }

            var nodeIterator = document.createNodeIterator(this.dropdown, NodeFilter.SHOW_ELEMENT, null, false);
            var hasFocus = false;
            var node = void 0;

            // walk down the tree of elements from the root dropdown div
            // and see if the target of the event is a child;
            // if so, it still has focus so don't close it yet
            while (node = nodeIterator.nextNode()) {
                if (node === target) {
                    hasFocus = true;
                    break;
                }
            }

            return hasFocus;
        }
    }, {
        key: 'handleBlurEvent',
        value: function handleBlurEvent(event) {
            // the `focusout` event stores the next item to gain focus in relatedTarget
            if (!this.hasFocus(event.relatedTarget)) {
                this.setState({
                    open: false
                });
            }
        }
    }, {
        key: 'handleMouseEvent',
        value: function handleMouseEvent(event) {
            if (!this.hasFocus(event.target)) {
                this.setState({
                    open: false
                });
            }
        }
    }, {
        key: 'toggle',
        value: function toggle() {
            this.setState({
                open: !this.state.open
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                'div',
                { className: 'pxl-dropdown ' + this.props.dropdownClass + ' ' + (this.state.open ? 'open' : ''), ref: function ref(dropdown) {
                        return _this2.dropdown = dropdown;
                    } },
                _react2.default.createElement(
                    'button',
                    { onClick: this.toggle,
                        className: 'pxl-btn ' + this.props.btnClass + ' pxl-dropdown__toggle',
                        type: 'button',
                        id: this.props.id,
                        'data-toggle': 'dropdown',
                        'aria-haspopup': 'true',
                        'aria-expanded': this.state.open },
                    this.props.iconClass && _react2.default.createElement('span', { className: this.props.iconClass }),
                    this.props.btnText
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'pxl-dropdown__menu', 'aria-labelledby': this.props.id },
                    this.props.children
                )
            );
        }
    }]);

    return Dropdown;
}(_react2.default.Component);

exports.default = Dropdown;


Dropdown.propTypes = {
    btnClass: _propTypes2.default.string,
    btnText: _propTypes2.default.string,
    children: _propTypes2.default.array.isRequired,
    className: _propTypes2.default.string,
    dropdownClass: _propTypes2.default.string,
    iconClass: _propTypes2.default.string,
    id: _propTypes2.default.string.isRequired
};

Dropdown.defaultProps = {
    btnClass: 'pxl-btn-default',
    btnText: 'Menu',
    children: [],
    className: '',
    dropdownClass: '',
    iconClass: '',
    id: ''
};