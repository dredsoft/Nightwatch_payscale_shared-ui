'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _CSSTransition = require('react-transition-group/CSSTransition');

var _CSSTransition2 = _interopRequireDefault(_CSSTransition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function CloseButton(props) {
    if (props.display) {
        return _react2.default.createElement(
            'div',
            { className: 'pxl-modal__close' },
            _react2.default.createElement(
                'a',
                { 'aria-label': 'Close', onClick: props.onClick },
                _react2.default.createElement(
                    'span',
                    null,
                    _react2.default.createElement('i', { className: 'icon-cancel' })
                )
            )
        );
    }
    return null;
}

CloseButton.propTypes = {
    display: _propTypes2.default.bool,
    onClick: _propTypes2.default.func
};

function ModalContent(props) {
    var hide = props.hide,
        className = props.className,
        onClose = props.onClose,
        onIgnore = props.onIgnore,
        children = props.children,
        id = props.id,
        displayCloseButton = props.displayCloseButton;


    if (hide) {
        return null;
    }
    return _react2.default.createElement(
        'div',
        { id: id, className: 'pxl-modal ' + className, onClick: onClose },
        _react2.default.createElement(
            'div',
            { key: 'pxl-modal-content', className: 'pxl-modal__content', onClick: onIgnore },
            _react2.default.createElement(CloseButton, { display: displayCloseButton, onClick: onClose }),
            children
        )
    );
}

ModalContent.propTypes = {
    className: _propTypes2.default.string,
    displayCloseButton: _propTypes2.default.bool,
    hide: _propTypes2.default.bool,
    id: _propTypes2.default.string,
    onClose: _propTypes2.default.func,
    onIgnore: _propTypes2.default.func
};

var Modal = function (_React$Component) {
    _inherits(Modal, _React$Component);

    function Modal(props) {
        _classCallCheck(this, Modal);

        var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

        _this._handleOnClick = _this._handleOnClick.bind(_this);
        _this.show = _this.show.bind(_this);
        _this.hide = _this.hide.bind(_this);

        _this.state = {
            hide: true
        };
        return _this;
    }

    _createClass(Modal, [{
        key: 'show',
        value: function show() {
            this.setState({ hide: false });
            if (document && document.body) {
                document.body.classList.add('pxl-modal__body');
            }
        }
    }, {
        key: 'hide',
        value: function hide() {
            this.setState({ hide: true });
            if (document && document.body) {
                document.body.classList.remove('pxl-modal__body');
            }
        }
    }, {
        key: '_handleOnClick',
        value: function _handleOnClick(e) {
            if (this.props.allowClose) {
                this.hide();
            }
        }
    }, {
        key: '_handleOnClickContent',
        value: function _handleOnClickContent(e) {
            e.stopPropagation();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                children = _props.children,
                id = _props.id,
                displayCloseButton = _props.displayCloseButton;
            var hide = this.state.hide;


            return _react2.default.createElement(
                _CSSTransition2.default,
                { classNames: 'pxl-modal', timeout: { enter: 250, exit: 250 } },
                _react2.default.createElement(
                    ModalContent,
                    {
                        key: hide ? id + 'hide' : '' + id,
                        hide: hide,
                        className: className,
                        id: id,
                        onIgnore: this._handleOnClickContent,
                        onClose: this._handleOnClick,
                        displayCloseButton: displayCloseButton },
                    children
                )
            );
        }
    }]);

    return Modal;
}(_react2.default.Component);

exports.default = Modal;


Modal.propTypes = {
    allowClose: _propTypes2.default.bool,
    className: _propTypes2.default.string,
    displayCloseButton: _propTypes2.default.bool,
    id: _propTypes2.default.string
};

Modal.defaultProps = {
    allowClose: true,
    className: '',
    displayCloseButton: false,
    id: 'modal'
};