'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _he = require('he');

var _he2 = _interopRequireDefault(_he);

var _option = require('../option');

var _option2 = _interopRequireDefault(_option);

var _OtherOption = require('./OtherOption');

var _OtherOption2 = _interopRequireDefault(_OtherOption);

var _Pill = require('./Pill');

var _Pill2 = _interopRequireDefault(_Pill);

var _LoadMore = require('./LoadMore');

var _LoadMore2 = _interopRequireDefault(_LoadMore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Options = function (_React$Component) {
    _inherits(Options, _React$Component);

    function Options(props) {
        _classCallCheck(this, Options);

        var _this = _possibleConstructorReturn(this, (Options.__proto__ || Object.getPrototypeOf(Options)).call(this, props));

        _this._handleOnClick = _this._handleOnClick.bind(_this);
        _this._handleLoadMore = _this._handleLoadMore.bind(_this);
        _this._getValue = _this._getValue.bind(_this);
        _this._syncValuesAndOptions = _this._syncValuesAndOptions.bind(_this);
        _this._getOptionComponents = _this._getOptionComponents.bind(_this);
        _this._handleOnClickOther = _this._handleOnClickOther.bind(_this);
        _this._handleOnChangeOtherInput = _this._handleOnChangeOtherInput.bind(_this);

        _this.state = {
            loadMax: false,
            otherChecked: false,
            otherInputValue: ''
        };
        return _this;
    }

    _createClass(Options, [{
        key: '_syncValuesAndOptions',
        value: function _syncValuesAndOptions(value, options) {
            var copy = options.slice(0);
            if (value && options) {
                value.forEach(function (v) {
                    var index = copy.indexOf(v);

                    if (index !== -1) {
                        copy.splice(index, 1);
                    }

                    copy.unshift(v);
                });
            }
            return copy;
        }
    }, {
        key: '_getValue',
        value: function _getValue(value) {
            return typeof value === 'string' ? [value] : value;
        }
    }, {
        key: '_getOptionComponents',
        value: function _getOptionComponents(options) {
            var loadMax = this.state.loadMax;
            var _props = this.props,
                type = _props.type,
                maxShown = _props.maxShown,
                initShown = _props.initShown,
                loadMore = _props.loadMore;

            var value = this._getValue(this.props.value);
            var me = this;

            var optionsLength = options ? options.length : 0;
            var max = maxShown !== -1 && optionsLength > maxShown ? maxShown : optionsLength;
            var min = value && value.length > initShown ? value.length : initShown;
            var displayCount = !loadMax && loadMore ? min : max;

            if (options && options.length > 0) {
                var optionsShown = options.slice(0, displayCount);
                var components = optionsShown.map(function (option) {
                    switch (type) {
                        case 'pills':
                            return _react2.default.createElement(_Pill2.default, { key: option, option: _he2.default.decode(option), selected: value.indexOf(option) !== -1, onClick: me._handleOnClick.bind(null, option) });
                        case 'checklist':
                        case 'radio':
                        default:
                            return _react2.default.createElement(_option2.default, {
                                key: option,
                                id: option,
                                text: _he2.default.decode(option),
                                checked: value.indexOf(option) !== -1,
                                value: option,
                                type: type,
                                onChange: me._handleOnClick.bind(null, option) });
                    }
                });

                return components;
            }
            return null;
        }
    }, {
        key: '_handleOnClick',
        value: function _handleOnClick(option) {
            var _props2 = this.props,
                multiValue = _props2.multiValue,
                id = _props2.id,
                onChange = _props2.onChange;

            var value = this._getValue(this.props.value);

            if (multiValue) {
                var newValue = value.slice(0, value.length);
                var index = newValue.indexOf(option);

                if (index !== -1) {
                    newValue.splice(index, 1);
                } else {
                    newValue.push(option);
                }

                onChange(id, newValue);
            } else {
                this.setState({ otherChecked: false, otherInputValue: '' });
                onChange(id, option);
            }
        }
    }, {
        key: '_handleLoadMore',
        value: function _handleLoadMore() {
            this.setState({ loadMax: true });
        }
    }, {
        key: '_handleOnClickOther',
        value: function _handleOnClickOther() {
            var _props3 = this.props,
                id = _props3.id,
                multiValue = _props3.multiValue,
                onChange = _props3.onChange;
            var _state = this.state,
                otherChecked = _state.otherChecked,
                otherInputValue = _state.otherInputValue;

            var value = this._getValue(this.props.value);

            if (multiValue && otherChecked) {
                var index = value.indexOf(otherInputValue);

                if (index !== -1) {
                    var newValue = value.slice(0, value.length);
                    newValue.splice(index, 1);
                    onChange(id, newValue);
                }

                this.setState({ otherChecked: false, otherInputValue: '' });
            } else if (!otherChecked) {
                this.setState({ otherChecked: true });

                if (!multiValue) {
                    onChange(id, '');
                }
            }
        }
    }, {
        key: '_handleOnChangeOtherInput',
        value: function _handleOnChangeOtherInput(inputId, inputValue) {
            var _props4 = this.props,
                id = _props4.id,
                multiValue = _props4.multiValue,
                onChange = _props4.onChange;
            var otherInputValue = this.state.otherInputValue;

            var value = this._getValue(this.props.value);

            if (multiValue) {
                var newValue = value.slice(0, value.length);
                var index = value.indexOf(otherInputValue);

                if (index !== -1) {
                    newValue.splice(index, 1, inputValue);
                } else {
                    newValue.push(inputValue);
                }

                onChange(id, newValue);
            } else {
                onChange(id, inputValue);
            }

            this.setState({ otherInputValue: inputValue });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props5 = this.props,
                id = _props5.id,
                loadMore = _props5.loadMore,
                className = _props5.className,
                options = _props5.options,
                syncOptions = _props5.syncOptions,
                value = _props5.value,
                otherEnabled = _props5.otherEnabled,
                otherInputProps = _props5.otherInputProps,
                type = _props5.type;
            var _state2 = this.state,
                loadMax = _state2.loadMax,
                otherChecked = _state2.otherChecked,
                otherInputValue = _state2.otherInputValue;

            options = syncOptions ? this._syncValuesAndOptions(value, options) : options;
            var optionComponents = this._getOptionComponents(options);

            return _react2.default.createElement(
                'div',
                { id: id, className: className },
                optionComponents,
                _react2.default.createElement(_OtherOption2.default, {
                    checked: otherChecked,
                    enabled: otherEnabled,
                    onChangeOtherInput: this._handleOnChangeOtherInput,
                    onClickOther: this._handleOnClickOther,
                    otherInputProps: otherInputProps,
                    otherInputValue: otherInputValue,
                    type: type }),
                _react2.default.createElement(_LoadMore2.default, {
                    onClick: this._handleLoadMore,
                    visible: !loadMax && loadMore && options && options.length > 0 && optionComponents && optionComponents.length < options.length })
            );
        }
    }]);

    return Options;
}(_react2.default.Component);

exports.default = Options;


Options.propTypes = {
    className: _propTypes2.default.string,
    id: _propTypes2.default.string,
    initShown: _propTypes2.default.number,
    loadMore: _propTypes2.default.bool,
    maxShown: _propTypes2.default.number,
    multiValue: _propTypes2.default.bool,
    onChange: _propTypes2.default.func,
    options: _propTypes2.default.array,
    otherEnabled: _propTypes2.default.bool,
    otherInputProps: _propTypes2.default.object,
    syncOptions: _propTypes2.default.bool,
    type: _propTypes2.default.oneOf(['pills', 'checklist', 'radio']),
    value: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.string])
};

Options.defaultProps = {
    className: '',
    initShown: 5,
    loadMore: false,
    maxShown: -1,
    multiValue: true,
    options: [],
    otherEnabled: false,
    otherInputProps: {},
    syncOptions: true,
    type: 'checklist',
    value: []
};

module.exports = Options;