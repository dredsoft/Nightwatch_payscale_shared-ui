'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function SelectOption(props) {
    var text = props.text,
        value = props.value;

    var optionValue = value === null ? '' : value;

    return _react2.default.createElement(
        'option',
        { value: optionValue, disabled: props.disabled },
        text
    );
}

SelectOption.defaultProps = {
    disabled: false
};

SelectOption.propTypes = {
    disabled: _propTypes2.default.bool,
    text: _propTypes2.default.string,
    value: _propTypes2.default.any
};

var Select = function (_React$Component) {
    _inherits(Select, _React$Component);

    function Select(props) {
        _classCallCheck(this, Select);

        var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));

        _this._handleOnChange = _this._handleOnChange.bind(_this);
        _this._handleOnBlur = _this._handleOnBlur.bind(_this);
        return _this;
    }

    _createClass(Select, [{
        key: '_handleOnChange',
        value: function _handleOnChange(e) {
            var _props = this.props,
                id = _props.id,
                onChange = _props.onChange;

            onChange(id, e.target.value);
        }
    }, {
        key: '_handleOnBlur',
        value: function _handleOnBlur(e) {
            var _props2 = this.props,
                id = _props2.id,
                onBlur = _props2.onBlur;

            onBlur(id, e.target.value);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props3 = this.props,
                value = _props3.value,
                options = _props3.options,
                id = _props3.id,
                className = _props3.className,
                disabled = _props3.disabled;


            var optionComponents = options.map(function (o) {
                return _react2.default.createElement(SelectOption, {
                    key: o.value,
                    text: o.text,
                    value: o.value,
                    disabled: o.disabled });
            });

            return _react2.default.createElement(
                'div',
                { className: className },
                _react2.default.createElement(
                    'select',
                    {
                        id: id,
                        disabled: disabled,
                        value: value,
                        className: 'pxl-form-control',
                        onBlur: this._handleOnBlur,
                        onChange: this._handleOnChange },
                    optionComponents
                )
            );
        }
    }]);

    return Select;
}(_react2.default.Component);

exports.default = Select;


Select.propTypes = {
    className: _propTypes2.default.string,
    disabled: _propTypes2.default.bool,
    id: _propTypes2.default.string,
    onBlur: _propTypes2.default.func,
    onChange: _propTypes2.default.func,
    options: _propTypes2.default.array,
    value: _propTypes2.default.any
};

Select.defaultProps = {
    className: '',
    disabled: false,
    onBlur: function onBlur() {},
    onChange: function onChange() {},
    options: []
};

module.exports = Select;