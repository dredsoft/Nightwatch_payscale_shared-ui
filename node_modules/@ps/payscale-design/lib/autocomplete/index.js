'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactAutosuggest = require('react-autosuggest');

var _reactAutosuggest2 = _interopRequireDefault(_reactAutosuggest);

var _he = require('he');

var _he2 = _interopRequireDefault(_he);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Autocomplete = function (_React$Component) {
    _inherits(Autocomplete, _React$Component);

    function Autocomplete(props) {
        _classCallCheck(this, Autocomplete);

        var _this = _possibleConstructorReturn(this, (Autocomplete.__proto__ || Object.getPrototypeOf(Autocomplete)).call(this, props));

        _this.state = {
            suggestions: _this.props.options.slice(0, _this.props.max),
            inputValue: _this.props.value
        };

        _this._handleOnSuggestionsFetchRequested = _this._handleOnSuggestionsFetchRequested.bind(_this);
        _this._handleOnSuggestionsClearRequested = _this._handleOnSuggestionsClearRequested.bind(_this);
        _this._handleRenderSuggestion = _this._handleRenderSuggestion.bind(_this);
        _this._handleOnBlur = _this._handleOnBlur.bind(_this);
        _this._handleOnSuggestionSelected = _this._handleOnSuggestionSelected.bind(_this);
        return _this;
    }

    _createClass(Autocomplete, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var _props = this.props,
                options = _props.options,
                max = _props.max;

            var newState = {};
            var updated = false;

            if (options.length !== nextProps.options.length || JSON.stringify(options) !== JSON.stringify(nextProps.options)) {
                newState.suggestions = nextProps.options.slice(0, max);
                updated = true;
            }

            if (nextProps.value !== this.state.inputValue) {
                newState.inputValue = nextProps.value;
                updated = true;
            }

            if (updated) {
                this.setState(newState);
            }
        }
    }, {
        key: '_handleOnBlur',
        value: function _handleOnBlur() {
            var inputProps = this.props.inputProps;
            var onBlur = inputProps.onBlur;


            this.setState({ inputValue: this.props.value });

            if (onBlur) {
                onBlur();
            }
        }
    }, {
        key: '_handleOnChange',
        value: function _handleOnChange(e, o) {
            var _props2 = this.props,
                forceSelect = _props2.forceSelect,
                onChange = _props2.onChange,
                id = _props2.id;

            var value = o.newValue;

            if (!forceSelect || o.method !== 'type') {
                onChange(id, value);
            }

            this.setState({ inputValue: value });

            if (o.method === 'enter') {
                e.preventDefault();
                return false;
            }
        }
    }, {
        key: '_handleOnSuggestionSelected',
        value: function _handleOnSuggestionSelected(e, o) {
            var _props3 = this.props,
                onChange = _props3.onChange,
                id = _props3.id;


            onChange(id, o.suggestionValue);

            if (o.method === 'enter') {
                e.preventDefault();
                return false;
            }
        }
    }, {
        key: '_handleOnSuggestionsFetchRequested',
        value: function _handleOnSuggestionsFetchRequested(e) {
            var me = this;
            var _props4 = this.props,
                url = _props4.url,
                extractData = _props4.extractData,
                max = _props4.max;


            if (url) {
                url = url.replace('{search}', encodeURIComponent(e.value));

                var request = new XMLHttpRequest();
                request.open('GET', url, true);
                request.onload = function () {
                    if (request.status >= 200 && request.status < 400) {
                        var resp = request.responseText;
                        var data = extractData ? extractData(JSON.parse(resp)) : JSON.parse(resp);
                        me.setState({ suggestions: data.slice(0, max) });
                    } else {
                        me.setState({ suggestions: [] });
                    }
                };

                request.onerror = function () {
                    me.setState({ suggestions: [] });
                };

                request.send();
            }
        }
    }, {
        key: '_handleOnSuggestionsClearRequested',
        value: function _handleOnSuggestionsClearRequested() {
            this.setState({
                suggestions: []
            });
        }
    }, {
        key: '_handleSuggestionValue',
        value: function _handleSuggestionValue(suggestion) {
            return _he2.default.decode(suggestion);
        }
    }, {
        key: '_handleRenderSuggestion',
        value: function _handleRenderSuggestion(suggestion) {
            return _react2.default.createElement(
                'span',
                null,
                _he2.default.decode(suggestion)
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props5 = this.props,
                id = _props5.id,
                className = _props5.className,
                placeholder = _props5.placeholder;
            var inputValue = this.state.inputValue;

            var me = this;

            // using Object.assign here results in very strange behavior if multiple Autocomplete's are on the same page
            var inputProps = _extends({}, this.props.inputProps, {
                id: id,
                value: inputValue ? inputValue : '',
                placeholder: placeholder,
                autoComplete: 'off',
                className: 'pxl-form-control',
                onBlur: this._handleOnBlur,
                onChange: function onChange(e, o) {
                    me._handleOnChange(e, o);
                }
            });

            return _react2.default.createElement(
                'div',
                { className: className },
                _react2.default.createElement(_reactAutosuggest2.default, {
                    suggestions: this.state.suggestions,
                    inputProps: inputProps,
                    onSuggestionsFetchRequested: this._handleOnSuggestionsFetchRequested,
                    onSuggestionsClearRequested: this._handleOnSuggestionsClearRequested,
                    getSuggestionValue: this._handleSuggestionValue,
                    onSuggestionSelected: this._handleOnSuggestionSelected,
                    renderSuggestion: this._handleRenderSuggestion,
                    id: id,
                    ref: function ref(as) {
                        _this2.autosuggest = as;
                    } })
            );
        }
    }]);

    return Autocomplete;
}(_react2.default.Component);

exports.default = Autocomplete;


Autocomplete.propTypes = {
    className: _propTypes2.default.string,
    error: _propTypes2.default.string,
    extractData: _propTypes2.default.func,
    forceSelect: _propTypes2.default.bool,
    id: _propTypes2.default.string.isRequired,
    inputProps: _propTypes2.default.object,
    max: _propTypes2.default.number,
    onChange: _propTypes2.default.func.isRequired,
    options: _propTypes2.default.array,
    placeholder: _propTypes2.default.string,
    text: _propTypes2.default.string,
    url: _propTypes2.default.string,
    value: _propTypes2.default.any
};

Autocomplete.defaultProps = {
    forceSelect: false,
    value: '',
    className: '',
    options: [],
    max: 10,
    inputProps: {}
};