'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.providerShape = exports.Context = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _server = require('./server');

var _server2 = _interopRequireDefault(_server);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable react/prop-types */

var defaultValue = {};

var Context = exports.Context = _react2.default.createContext(defaultValue);

var providerShape = exports.providerShape = _propTypes2.default.shape({
  setHelmet: _propTypes2.default.func,
  helmetInstances: _propTypes2.default.shape({
    get: _propTypes2.default.func,
    add: _propTypes2.default.func,
    remove: _propTypes2.default.func
  })
});

var canUseDOM = typeof document !== 'undefined';

var Provider = function (_Component) {
  _inherits(Provider, _Component);

  function Provider(props) {
    _classCallCheck(this, Provider);

    var _this = _possibleConstructorReturn(this, (Provider.__proto__ || Object.getPrototypeOf(Provider)).call(this, props));

    _this.instances = [];
    _this.value = {
      setHelmet: function setHelmet(serverState) {
        _this.props.context.helmet = serverState;
      },
      helmetInstances: {
        get: function get() {
          return _this.instances;
        },
        add: function add(instance) {
          _this.instances.push(instance);
        },
        remove: function remove(instance) {
          var index = _this.instances.indexOf(instance);
          _this.instances.splice(index, 1);
        }
      }
    };


    if (!Provider.canUseDOM) {
      props.context.helmet = (0, _server2.default)({
        baseTag: [],
        bodyAttributes: {},
        encodeSpecialCharacters: true,
        htmlAttributes: {},
        linkTags: [],
        metaTags: [],
        noscriptTags: [],
        scriptTags: [],
        styleTags: [],
        title: '',
        titleAttributes: {}
      });
    }
    return _this;
  }

  _createClass(Provider, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        Context.Provider,
        { value: this.value },
        this.props.children
      );
    }
  }]);

  return Provider;
}(_react.Component);

Provider.canUseDOM = canUseDOM;
Provider.propTypes = {
  context: _propTypes2.default.shape({}),
  children: _propTypes2.default.node.isRequired
};
Provider.defaultProps = {
  context: {}
};
exports.default = Provider;