'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _shallowequal = require('shallowequal');

var _shallowequal2 = _interopRequireDefault(_shallowequal);

var _client = require('./client');

var _client2 = _interopRequireDefault(_client);

var _server = require('./server');

var _server2 = _interopRequireDefault(_server);

var _utils = require('./utils');

var _Provider = require('./Provider');

var _Provider2 = _interopRequireDefault(_Provider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dispatcher = function (_Component) {
  _inherits(Dispatcher, _Component);

  function Dispatcher() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Dispatcher);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Dispatcher.__proto__ || Object.getPrototypeOf(Dispatcher)).call.apply(_ref, [this].concat(args))), _this), _this.rendered = false, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Dispatcher, [{
    key: 'init',


    // componentWillMount will be deprecated
    // for SSR, initialize on first render
    // constructor is also unsafe in StrictMode
    value: function init() {
      if (this.rendered) {
        return;
      }

      this.rendered = true;

      var helmetInstances = this.props.context.helmetInstances;

      helmetInstances.add(this);
      this.emitChange();
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return !(0, _shallowequal2.default)(nextProps, this.props);
    }
  }, {
    key: 'emitChange',
    value: function emitChange() {
      var _props$context = this.props.context,
          helmetInstances = _props$context.helmetInstances,
          setHelmet = _props$context.setHelmet;

      var serverState = null;
      var state = (0, _utils.reducePropsToState)(helmetInstances.get().map(function (instance) {
        var props = _extends({}, instance.props);
        delete props.context;
        return props;
      }));
      if (_Provider2.default.canUseDOM) {
        (0, _client2.default)(state);
      } else if (_server2.default) {
        serverState = (0, _server2.default)(state);
      }
      setHelmet(serverState);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.emitChange();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var helmetInstances = this.props.context.helmetInstances;

      helmetInstances.remove(this);
      this.emitChange();
    }
  }, {
    key: 'render',
    value: function render() {
      this.init();

      return null;
    }
  }]);

  return Dispatcher;
}(_react.Component);

Dispatcher.propTypes = {
  context: _Provider.providerShape.isRequired
};
exports.default = Dispatcher;