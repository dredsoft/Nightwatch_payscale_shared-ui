'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HelmetProvider = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Provider = require('./Provider');

Object.defineProperty(exports, 'HelmetProvider', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Provider).default;
  }
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactFastCompare = require('react-fast-compare');

var _reactFastCompare2 = _interopRequireDefault(_reactFastCompare);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _Dispatcher = require('./Dispatcher');

var _Dispatcher2 = _interopRequireDefault(_Dispatcher);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable class-methods-use-this */

var Helmet = function (_Component) {
  _inherits(Helmet, _Component);

  function Helmet() {
    _classCallCheck(this, Helmet);

    return _possibleConstructorReturn(this, (Helmet.__proto__ || Object.getPrototypeOf(Helmet)).apply(this, arguments));
  }

  _createClass(Helmet, [{
    key: 'shouldComponentUpdate',

    /**
     * @param {Object} base: {"target": "_blank", "href": "http://mysite.com/"}
     * @param {Object} bodyAttributes: {"className": "root"}
     * @param {String} defaultTitle: "Default Title"
     * @param {Boolean} defer: true
     * @param {Boolean} encodeSpecialCharacters: true
     * @param {Object} htmlAttributes: {"lang": "en", "amp": undefined}
     * @param {Array} link: [{"rel": "canonical", "href": "http://mysite.com/example"}]
     * @param {Array} meta: [{"name": "description", "content": "Test description"}]
     * @param {Array} noscript: [{"innerHTML": "<img src='http://mysite.com/js/test.js'"}]
     * @param {Function} onChangeClientState: "(newState) => console.log(newState)"
     * @param {Array} script: [{"type": "text/javascript", "src": "http://mysite.com/js/test.js"}]
     * @param {Array} style: [{"type": "text/css", "cssText": "div { display: block; color: blue; }"}]
     * @param {String} title: "Title"
     * @param {Object} titleAttributes: {"itemprop": "name"}
     * @param {String} titleTemplate: "MySite.com - %s"
     */
    /* eslint-disable react/prop-types, react/forbid-prop-types, react/require-default-props */
    value: function shouldComponentUpdate(nextProps) {
      return !(0, _reactFastCompare2.default)(this.props, nextProps);
    }
    /* eslint-enable react/prop-types, react/forbid-prop-types, react/require-default-props */

  }, {
    key: 'mapNestedChildrenToProps',
    value: function mapNestedChildrenToProps(child, nestedChildren) {
      if (!nestedChildren) {
        return null;
      }

      switch (child.type) {
        case _constants.TAG_NAMES.SCRIPT:
        case _constants.TAG_NAMES.NOSCRIPT:
          return {
            innerHTML: nestedChildren
          };

        case _constants.TAG_NAMES.STYLE:
          return {
            cssText: nestedChildren
          };
        default:
          throw new Error('<' + child.type + ' /> elements are self-closing and can not contain children. Refer to our API for more information.');
      }
    }
  }, {
    key: 'flattenArrayTypeChildren',
    value: function flattenArrayTypeChildren(_ref) {
      var child = _ref.child,
          arrayTypeChildren = _ref.arrayTypeChildren,
          newChildProps = _ref.newChildProps,
          nestedChildren = _ref.nestedChildren;

      return _extends({}, arrayTypeChildren, _defineProperty({}, child.type, [].concat(_toConsumableArray(arrayTypeChildren[child.type] || []), [_extends({}, newChildProps, this.mapNestedChildrenToProps(child, nestedChildren))])));
    }
  }, {
    key: 'mapObjectTypeChildren',
    value: function mapObjectTypeChildren(_ref2) {
      var _extends3;

      var child = _ref2.child,
          newProps = _ref2.newProps,
          newChildProps = _ref2.newChildProps,
          nestedChildren = _ref2.nestedChildren;

      switch (child.type) {
        case _constants.TAG_NAMES.TITLE:
          return _extends({}, newProps, (_extends3 = {}, _defineProperty(_extends3, child.type, nestedChildren), _defineProperty(_extends3, 'titleAttributes', _extends({}, newChildProps)), _extends3));

        case _constants.TAG_NAMES.BODY:
          return _extends({}, newProps, {
            bodyAttributes: _extends({}, newChildProps)
          });

        case _constants.TAG_NAMES.HTML:
          return _extends({}, newProps, {
            htmlAttributes: _extends({}, newChildProps)
          });
        default:
          return _extends({}, newProps, _defineProperty({}, child.type, _extends({}, newChildProps)));
      }
    }
  }, {
    key: 'mapArrayTypeChildrenToProps',
    value: function mapArrayTypeChildrenToProps(arrayTypeChildren, newProps) {
      var newFlattenedProps = _extends({}, newProps);

      Object.keys(arrayTypeChildren).forEach(function (arrayChildName) {
        newFlattenedProps = _extends({}, newFlattenedProps, _defineProperty({}, arrayChildName, arrayTypeChildren[arrayChildName]));
      });

      return newFlattenedProps;
    }
  }, {
    key: 'warnOnInvalidChildren',
    value: function warnOnInvalidChildren(child, nestedChildren) {
      (0, _invariant2.default)(_constants.VALID_TAG_NAMES.some(function (name) {
        return child.type === name;
      }), typeof child.type === 'function' ? 'You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.' : 'Only elements types ' + _constants.VALID_TAG_NAMES.join(', ') + ' are allowed. Helmet does not support rendering <' + child.type + '> elements. Refer to our API for more information.');

      (0, _invariant2.default)(!nestedChildren || typeof nestedChildren === 'string' || Array.isArray(nestedChildren) && !nestedChildren.some(function (nestedChild) {
        return typeof nestedChild !== 'string';
      }), 'Helmet expects a string as a child of <' + child.type + '>. Did you forget to wrap your children in braces? ( <' + child.type + '>{``}</' + child.type + '> ) Refer to our API for more information.');

      return true;
    }
  }, {
    key: 'mapChildrenToProps',
    value: function mapChildrenToProps(children, newProps) {
      var _this2 = this;

      var arrayTypeChildren = {};

      _react2.default.Children.forEach(children, function (child) {
        if (!child || !child.props) {
          return;
        }

        var _child$props = child.props,
            nestedChildren = _child$props.children,
            childProps = _objectWithoutProperties(_child$props, ['children']);
        // convert React props to HTML attributes


        var newChildProps = Object.keys(childProps).reduce(function (obj, key) {
          obj[_constants.HTML_TAG_MAP[key] || key] = childProps[key];
          return obj;
        }, {});

        var type = child.type;

        if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'symbol') {
          type = type.toString();
        } else {
          _this2.warnOnInvalidChildren(child, nestedChildren);
        }

        switch (type) {
          case _constants.TAG_NAMES.FRAGMENT:
            newProps = _this2.mapChildrenToProps(nestedChildren, newProps);
            break;

          case _constants.TAG_NAMES.LINK:
          case _constants.TAG_NAMES.META:
          case _constants.TAG_NAMES.NOSCRIPT:
          case _constants.TAG_NAMES.SCRIPT:
          case _constants.TAG_NAMES.STYLE:
            arrayTypeChildren = _this2.flattenArrayTypeChildren({
              child: child,
              arrayTypeChildren: arrayTypeChildren,
              newChildProps: newChildProps,
              nestedChildren: nestedChildren
            });
            break;

          default:
            newProps = _this2.mapObjectTypeChildren({
              child: child,
              newProps: newProps,
              newChildProps: newChildProps,
              nestedChildren: nestedChildren
            });
            break;
        }
      });

      return this.mapArrayTypeChildrenToProps(arrayTypeChildren, newProps);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          props = _objectWithoutProperties(_props, ['children']);

      var newProps = _extends({}, props);

      if (children) {
        newProps = this.mapChildrenToProps(children, newProps);
      }

      return _react2.default.createElement(
        _Provider.Context.Consumer,
        null,
        function (context) {
          return _react2.default.createElement(_Dispatcher2.default, _extends({}, newProps, { context: context }));
        }
      );
    }
  }]);

  return Helmet;
}(_react.Component);

Helmet.propTypes = {
  base: _propTypes2.default.object,
  bodyAttributes: _propTypes2.default.object,
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
  defaultTitle: _propTypes2.default.string,
  defer: _propTypes2.default.bool,
  encodeSpecialCharacters: _propTypes2.default.bool,
  htmlAttributes: _propTypes2.default.object,
  link: _propTypes2.default.arrayOf(_propTypes2.default.object),
  meta: _propTypes2.default.arrayOf(_propTypes2.default.object),
  noscript: _propTypes2.default.arrayOf(_propTypes2.default.object),
  onChangeClientState: _propTypes2.default.func,
  script: _propTypes2.default.arrayOf(_propTypes2.default.object),
  style: _propTypes2.default.arrayOf(_propTypes2.default.object),
  title: _propTypes2.default.string,
  titleAttributes: _propTypes2.default.object,
  titleTemplate: _propTypes2.default.string
};
Helmet.defaultProps = {
  defer: true,
  encodeSpecialCharacters: true
};
exports.default = Helmet;