"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var shortcut_1 = require("./shortcut");
var ev = function (attr) { return new KeyboardEvent('keydown', __assign({}, attr)); };
describe('eventToShortcut', function () {
    test('it handles alt key inputs', function () {
        var output = shortcut_1.eventToShortcut(ev({ altKey: true, key: 'Alt' }));
        expect(output).toEqual(null);
    });
    test('it handles ctrl key inputs', function () {
        var output = shortcut_1.eventToShortcut(ev({ ctrlKey: true, key: 'Control' }));
        expect(output).toEqual(null);
    });
    test('it handles meta key inputs', function () {
        var output = shortcut_1.eventToShortcut(ev({ metaKey: true, key: 'Meta' }));
        expect(output).toEqual(null);
    });
    test('it handles shift key inputs', function () {
        var output = shortcut_1.eventToShortcut(ev({ shiftKey: true, key: 'Shift' }));
        expect(output).toEqual(null);
    });
    test('it handles enter key inputs', function () {
        var output = shortcut_1.eventToShortcut(ev({ key: 'Enter' }));
        expect(output).toEqual(null);
    });
    test('it handles tab key inputs', function () {
        var output = shortcut_1.eventToShortcut(ev({ key: 'Tab' }));
        expect(output).toEqual(null);
    });
    test('it handles space bar inputs', function () {
        var output = shortcut_1.eventToShortcut(ev({ key: ' ' }));
        expect(output).toEqual(['space']);
    });
    test('it handles escape inputs', function () {
        var output = shortcut_1.eventToShortcut(ev({ key: 'Escape' }));
        expect(output).toEqual(['escape']);
    });
    test('it capitalizes a letter key through', function () {
        var output = shortcut_1.eventToShortcut(ev({ key: 'a' }));
        expect(output).toEqual(['A']);
    });
    test('it passes regular key through', function () {
        var output = shortcut_1.eventToShortcut(ev({ key: '1' }));
        expect(output).toEqual(['1']);
    });
    test('it passes modified regular key through', function () {
        var output = shortcut_1.eventToShortcut(ev({ altKey: true, key: '1' }));
        expect(output).toEqual(['alt', '1']);
    });
});
describe('keyToSymbol', function () {
    test('control returns a caret', function () {
        var result = shortcut_1.keyToSymbol('control');
        expect(result).toBe('⌃');
    });
    test('meta returns ⌘', function () {
        var result = shortcut_1.keyToSymbol('meta');
        expect(result).toEqual('⌘');
    });
    test('shift returns ⇧', function () {
        var result = shortcut_1.keyToSymbol('shift');
        expect(result).toBe('⇧​');
    });
    test('enter returns an empty string', function () {
        var result = shortcut_1.keyToSymbol('Enter');
        expect(result).toBe('');
    });
    // tslint:disable-next-line:quotemark
    test("' ' returns SPACE", function () {
        var result = shortcut_1.keyToSymbol(' ');
        expect(result).toEqual('SPACE');
    });
    test('escape returns esc', function () {
        var result = shortcut_1.keyToSymbol('escape');
        expect(result).toEqual('');
    });
    test('ArrowUp returns ↑​​​', function () {
        var result = shortcut_1.keyToSymbol('ArrowUp');
        expect(result).toBe('↑');
    });
    test('ArrowDown returns ↓​​​', function () {
        var result = shortcut_1.keyToSymbol('ArrowDown');
        expect(result).toBe('↓');
    });
    test('ArrowLeft returns ←', function () {
        var result = shortcut_1.keyToSymbol('ArrowLeft');
        expect(result).toBe('←');
    });
    test('ArrowRight returns →', function () {
        var result = shortcut_1.keyToSymbol('ArrowRight');
        expect(result).toBe('→');
    });
    test('it capitalizes a lowercase key', function () {
        var output = shortcut_1.keyToSymbol('a');
        expect(output).toBe('A');
    });
});
