"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var global_1 = require("global");
exports.isMacLike = function () { return (global_1.navigator && global_1.navigator.platform ? !!global_1.navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i) : false); };
exports.controlOrMetaSymbol = function () { return (exports.isMacLike() ? '⌘' : 'ctrl'); };
exports.controlOrMetaKey = function () { return (exports.isMacLike() ? 'meta' : 'control'); };
exports.optionOrAltSymbol = function () { return (exports.isMacLike() ? '⌥' : 'alt'); };
exports.isShortcutTaken = function (arr1, arr2) { return JSON.stringify(arr1) === JSON.stringify(arr2); };
// Map a keyboard event to a keyboard shortcut
// NOTE: if we change the fields on the event that we need, we'll need to update the serialization in core/preview/start.js
exports.eventToShortcut = function (e) {
    // Meta key only doesn't map to a shortcut
    if (['Meta', 'Alt', 'Control', 'Shift'].includes(e.key)) {
        return null;
    }
    var keys = [];
    if (e.altKey) {
        keys.push('alt');
    }
    if (e.ctrlKey) {
        keys.push('control');
    }
    if (e.metaKey) {
        keys.push('meta');
    }
    if (e.shiftKey) {
        keys.push('shift');
    }
    if (e.key && e.key.length === 1 && e.key !== ' ') {
        keys.push(e.key.toUpperCase());
    }
    if (e.key === ' ') {
        keys.push('space');
    }
    if (e.key === 'Escape') {
        keys.push('escape');
    }
    if (e.key === 'ArrowRight') {
        keys.push('ArrowRight');
    }
    if (e.key === 'ArrowDown') {
        keys.push('ArrowDown');
    }
    if (e.key === 'ArrowUp') {
        keys.push('ArrowUp');
    }
    if (e.key === 'ArrowLeft') {
        keys.push('ArrowLeft');
    }
    return keys.length > 0 ? keys : null;
};
exports.shortcutMatchesShortcut = function (inputShortcut, shortcut) {
    return inputShortcut && inputShortcut.length === shortcut.length && !inputShortcut.find(function (key, i) { return key !== shortcut[i]; });
};
// Should this keyboard event trigger this keyboard shortcut?
exports.eventMatchesShortcut = function (e, shortcut) {
    return exports.shortcutMatchesShortcut(exports.eventToShortcut(e), shortcut);
};
exports.keyToSymbol = function (key) {
    if (key === 'alt') {
        return exports.optionOrAltSymbol();
    }
    if (key === 'control') {
        return '⌃';
    }
    if (key === 'meta') {
        return '⌘';
    }
    if (key === 'shift') {
        return '⇧​';
    }
    if (key === 'Enter' || key === 'Backspace' || key === 'Esc') {
        return '';
    }
    if (key === 'escape') {
        return '';
    }
    if (key === ' ') {
        return 'SPACE';
    }
    if (key === 'ArrowUp') {
        return '↑';
    }
    if (key === 'ArrowDown') {
        return '↓';
    }
    if (key === 'ArrowLeft') {
        return '←';
    }
    if (key === 'ArrowRight') {
        return '→';
    }
    return key.toUpperCase();
};
// Display the shortcut as a human readable string
exports.shortcutToHumanString = function (shortcut) {
    return shortcut.map(exports.keyToSymbol).join(' ');
};
