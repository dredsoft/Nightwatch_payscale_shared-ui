"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Consumer = exports.Provider = void 0;

require("core-js/modules/es6.array.index-of");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.array.from");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es6.date.to-string");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.array.is-array");

require("core-js/modules/es6.object.define-property");

require("core-js/modules/es6.object.create");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es6.array.for-each");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.array.map");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _coreEvents = _interopRequireWildcard(require("@storybook/core-events"));

var _initProviderApi = _interopRequireDefault(require("./init-provider-api"));

var _store = _interopRequireDefault(require("./store"));

var _initialState = _interopRequireDefault(require("./initial-state"));

var _addons = _interopRequireDefault(require("./addons"));

var _channel = _interopRequireDefault(require("./channel"));

var _notifications = _interopRequireDefault(require("./notifications"));

var _stories = _interopRequireDefault(require("./stories"));

var _layout = _interopRequireDefault(require("./layout"));

var _shortcuts = _interopRequireDefault(require("./shortcuts"));

var _url = _interopRequireDefault(require("./url"));

var _versions = _interopRequireDefault(require("./versions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Context = _react.default.createContext({
  api: undefined,
  state: (0, _initialState.default)({})
});

var STORY_CHANGED = _coreEvents.default.STORY_CHANGED,
    SET_STORIES = _coreEvents.default.SET_STORIES,
    SELECT_STORY = _coreEvents.default.SELECT_STORY;

var Provider =
/*#__PURE__*/
function (_Component) {
  _inherits(Provider, _Component);

  function Provider(props) {
    var _this;

    _classCallCheck(this, Provider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Provider).call(this, props));
    var provider = props.provider,
        location = props.location,
        path = props.path,
        viewMode = props.viewMode,
        storyId = props.storyId,
        navigate = props.navigate;
    var store = new _store.default({
      getState: function getState() {
        return _this.state;
      },
      setState: function setState(a, b) {
        return _this.setState(a, b);
      }
    }); // Initialize the state to be the initial (persisted) state of the store.
    // This gives the modules the chance to read the persisted state, apply their defaults
    // and override if necessary

    var apiData = {
      navigate: navigate,
      store: store,
      provider: provider,
      location: location,
      path: path,
      viewMode: viewMode,
      storyId: storyId,
      mode: process.env.NODE_ENV
    };
    _this.state = store.getInitialState();
    _this.modules = [_channel.default, _addons.default, _layout.default, _notifications.default, _shortcuts.default, _stories.default, _url.default, _versions.default].map(function (initModule) {
      return initModule(apiData);
    }); // Create our initial state by combining the initial state of all modules, then overlaying any saved state

    var state = _initialState.default.apply(void 0, _toConsumableArray(_this.modules.map(function (m) {
      return m.state;
    }))); // Get our API by combining the APIs exported by each module


    var combo = Object.assign.apply(Object, [{
      navigate: navigate
    }].concat(_toConsumableArray(_this.modules.map(function (m) {
      return m.api;
    }))));
    var api = (0, _initProviderApi.default)({
      provider: provider,
      store: store,
      api: combo
    });
    api.on(STORY_CHANGED, function (id) {
      var options = api.getParameters(id, 'options');
      api.setOptions(options);
    });
    api.on(SET_STORIES, function (data) {
      api.setStories(data.stories);
      var options = storyId ? api.getParameters(storyId, 'options') : api.getParameters(Object.keys(data.stories)[0], 'options');
      api.setOptions(options);
    });
    api.on(_coreEvents.STORIES_CONFIGURED, function () {
      store.setState({
        storiesConfigured: true
      });
    });
    api.on(SELECT_STORY, function (_ref) {
      var kind = _ref.kind,
          story = _ref.story,
          rest = _objectWithoutProperties(_ref, ["kind", "story"]);

      api.selectStory(kind, story, rest);
    });
    _this.state = state;
    _this.api = api;
    return _this;
  }

  _createClass(Provider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      // Now every module has had a chance to set its API, call init on each module which gives it
      // a chance to do things that call other modules' APIs.
      this.modules.forEach(function (_ref2) {
        var init = _ref2.init;

        if (init) {
          init({
            api: _this2.api
          });
        }
      });
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      var prevState = this.state,
          prevProps = this.props;

      if (prevState !== nextState) {
        return true;
      }

      if (prevProps.path !== nextProps.path) {
        return true;
      }

      return false;
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var value = {
        state: this.state,
        api: this.api
      };
      return _react.default.createElement(Context.Provider, {
        value: value
      }, typeof children === 'function' ? children(value) : children);
    }
  }]);

  return Provider;
}(_react.Component);

exports.Provider = Provider;
Provider.displayName = "Provider";
Provider.propTypes = {
  navigate: _propTypes.default.func.isRequired,
  provider: _propTypes.default.shape({}).isRequired,
  location: _propTypes.default.shape({}).isRequired,
  path: _propTypes.default.string,
  viewMode: _propTypes.default.oneOf(['story', 'info']),
  storyId: _propTypes.default.string,
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]).isRequired
};
Provider.defaultProps = {
  viewMode: undefined,
  storyId: undefined,
  path: undefined
};

Provider.getDerivedStateFromProps = function (props, state) {
  if (state.path !== props.path) {
    return Object.assign({}, state, {
      location: props.location,
      path: props.path,
      viewMode: props.viewMode,
      storyId: props.storyId
    });
  }

  return null;
};

Provider.displayName = 'Manager';
var Consumer = Context.Consumer;
exports.Consumer = Consumer;