"use strict";

require("core-js/modules/es6.object.define-property");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es6.object.assign");

require("core-js/modules/es6.function.name");

require("core-js/modules/es6.regexp.replace");

var _react = _interopRequireDefault(require("react"));

var _memoizerific = _interopRequireDefault(require("memoizerific"));

var _context = require("../core/context");

var _preview = require("../components/preview/preview");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var nonAlphanumSpace = /[^a-z0-9 ]/gi;
var doubleSpace = /\s\s/gi;

var replacer = function replacer(match) {
  return " ".concat(match, " ");
};

var addExtraWhiteSpace = function addExtraWhiteSpace(input) {
  return input.replace(nonAlphanumSpace, replacer).replace(doubleSpace, ' ');
};

var createPreviewActions = (0, _memoizerific.default)(1)(function (api) {
  return {
    toggleFullscreen: function toggleFullscreen() {
      return api.toggleFullscreen();
    }
  };
});

var createProps = function createProps(api, layout, location, path, storyId, viewMode, selected) {
  return {
    api: api,
    getElements: api.getElements,
    actions: createPreviewActions(api),
    options: layout,
    location: location,
    path: path,
    storyId: storyId,
    viewMode: viewMode,
    description: selected ? addExtraWhiteSpace("".concat(selected.kind, " - ").concat(selected.name)) : ''
  };
};

var PreviewConnected = _react.default.memo(function (props) {
  return _react.default.createElement(_context.Consumer, null, function (_ref) {
    var state = _ref.state,
        api = _ref.api;
    return _react.default.createElement(_preview.Preview, _extends({}, props, createProps(api, state.layout, state.location, state.path, state.storyId, state.viewMode, state.storiesHash[state.storyId])));
  });
});

PreviewConnected.displayName = 'PreviewConnected';
var _default = PreviewConnected;
exports.default = _default;