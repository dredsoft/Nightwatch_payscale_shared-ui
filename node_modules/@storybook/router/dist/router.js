"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var global_1 = require("global");
var react_1 = __importDefault(require("react"));
var router_1 = require("@reach/router");
exports.LocationProvider = router_1.LocationProvider;
var visibility_1 = require("./visibility");
var utils_1 = require("./utils");
var getBase = function () { return global_1.document.location.pathname + '?'; };
var queryNavigate = function (to) {
    router_1.navigate(getBase() + "path=" + to);
};
exports.navigate = queryNavigate;
// A component that will navigate to a new location/path when clicked
var QueryLink = function (_a) {
    var to = _a.to, children = _a.children, rest = __rest(_a, ["to", "children"]);
    return (react_1.default.createElement(router_1.Link, __assign({ to: getBase() + "path=" + to }, rest), children));
};
exports.Link = QueryLink;
QueryLink.displayName = 'QueryLink';
// A render-prop component where children is called with a location
// and will be called whenever it changes when it changes
var QueryLocation = function (_a) {
    var children = _a.children;
    return (react_1.default.createElement(router_1.Location, null, function (_a) {
        var location = _a.location;
        var path = utils_1.queryFromString(location.search).path;
        var _b = utils_1.storyDataFromString(path), viewMode = _b.viewMode, storyId = _b.storyId;
        return children({ path: path, location: location, navigate: queryNavigate, viewMode: viewMode, storyId: storyId });
    }));
};
exports.Location = QueryLocation;
QueryLocation.displayName = 'QueryLocation';
// A render-prop component for rendering when a certain path is hit.
// It's immensly similar to `Location` but it receives an addition data property: `match`.
// match has a truethy value when the path is hit.
var QueryMatch = function (_a) {
    var children = _a.children, targetPath = _a.path, _b = _a.startsWith, startsWith = _b === void 0 ? false : _b;
    return (react_1.default.createElement(QueryLocation, null, function (_a) {
        var urlPath = _a.path, rest = __rest(_a, ["path"]);
        return children(__assign({ match: utils_1.getMatch(urlPath, targetPath, startsWith) }, rest));
    }));
};
exports.Match = QueryMatch;
QueryMatch.displayName = 'QueryMatch';
// A component to conditionally render children based on matching a target path
var Route = function (_a) {
    var path = _a.path, children = _a.children, _b = _a.startsWith, startsWith = _b === void 0 ? false : _b, _c = _a.hideOnly, hideOnly = _c === void 0 ? false : _c;
    return (react_1.default.createElement(QueryMatch, { path: path, startsWith: startsWith }, function (_a) {
        var match = _a.match;
        if (hideOnly) {
            return react_1.default.createElement(visibility_1.ToggleVisibility, { hidden: !match }, children);
        }
        return match ? children : null;
    }));
};
exports.Route = Route;
Route.displayName = 'Route';
