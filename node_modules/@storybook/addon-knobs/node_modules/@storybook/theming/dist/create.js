"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This generates theme variables in the correct shape for the UI
var react_inspector_1 = require("react-inspector");
var polished_1 = require("polished");
var light_1 = __importDefault(require("./themes/light"));
var dark_1 = __importDefault(require("./themes/dark"));
var base_1 = require("./base");
var animation_1 = require("./animation");
var syntax_1 = require("./modules/syntax");
var themes = { light: light_1.default, dark: dark_1.default };
var createColors = function (vars) { return ({
    // Changeable colors
    primary: vars.colorPrimary,
    secondary: vars.colorSecondary,
    tertiary: base_1.color.tertiary,
    ancillary: base_1.color.ancillary,
    // Complimentary
    orange: base_1.color.orange,
    gold: base_1.color.gold,
    green: base_1.color.green,
    seafoam: base_1.color.seafoam,
    purple: base_1.color.purple,
    ultraviolet: base_1.color.ultraviolet,
    // Monochrome
    lightest: base_1.color.lightest,
    lighter: base_1.color.lighter,
    light: base_1.color.light,
    mediumlight: base_1.color.mediumlight,
    medium: base_1.color.medium,
    mediumdark: base_1.color.mediumdark,
    dark: base_1.color.dark,
    darker: base_1.color.darker,
    darkest: base_1.color.darkest,
    // For borders
    border: base_1.color.border,
    // Status
    positive: base_1.color.positive,
    negative: base_1.color.negative,
    warning: base_1.color.warning,
    defaultText: vars.textColor || base_1.color.darkest,
    inverseText: vars.textInverseColor || base_1.color.lightest,
}); };
var lightSyntaxColors = {
    green1: '#008000',
    red1: '#A31515',
    red2: '#9a050f',
    red3: '#800000',
    red4: '#ff0000',
    gray1: '#393A34',
    cyan1: '#36acaa',
    cyan2: '#2B91AF',
    blue1: '#0000ff',
    blue2: '#00009f',
};
var darkSyntaxColors = {
    green1: '#7C7C7C',
    red1: '#92C379',
    red2: '#9a050f',
    red3: '#A8FF60',
    red4: '#96CBFE',
    gray1: '#EDEDED',
    cyan1: '#C6C5FE',
    cyan2: '#FFFFB6',
    blue1: '#B474DD',
    blue2: '#00009f',
};
exports.create = function (vars, rest) {
    if (vars === void 0) { vars = { base: 'light' }; }
    var inherit = __assign({}, themes.light, (themes[vars.base] || {}), vars, { base: themes[vars.base] ? vars.base : 'light' });
    return __assign({}, rest, inherit, { barSelectedColor: vars.barSelectedColor || inherit.colorSecondary });
};
exports.convert = function (inherit) {
    if (inherit === void 0) { inherit = light_1.default; }
    var base = inherit.base, colorPrimary = inherit.colorPrimary, colorSecondary = inherit.colorSecondary, appBg = inherit.appBg, appContentBg = inherit.appContentBg, appBorderColor = inherit.appBorderColor, appBorderRadius = inherit.appBorderRadius, fontBase = inherit.fontBase, fontCode = inherit.fontCode, textColor = inherit.textColor, textInverseColor = inherit.textInverseColor, barTextColor = inherit.barTextColor, barSelectedColor = inherit.barSelectedColor, barBg = inherit.barBg, inputBg = inherit.inputBg, inputBorder = inherit.inputBorder, inputTextColor = inherit.inputTextColor, inputBorderRadius = inherit.inputBorderRadius, brandTitle = inherit.brandTitle, brandUrl = inherit.brandUrl, brandImage = inherit.brandImage, rest = __rest(inherit, ["base", "colorPrimary", "colorSecondary", "appBg", "appContentBg", "appBorderColor", "appBorderRadius", "fontBase", "fontCode", "textColor", "textInverseColor", "barTextColor", "barSelectedColor", "barBg", "inputBg", "inputBorder", "inputTextColor", "inputBorderRadius", "brandTitle", "brandUrl", "brandImage"]);
    return __assign({}, (rest || {}), { base: base, color: createColors(inherit), background: {
            app: appBg,
            content: appContentBg,
            hoverable: base === 'light' ? 'rgba(0,0,0,.05)' : 'rgba(250,250,252,.1)' || base_1.background.hoverable,
            positive: base_1.background.positive,
            negative: base_1.background.negative,
            warning: base_1.background.warning,
        }, typography: {
            fonts: {
                base: fontBase,
                mono: fontCode,
            },
            weight: base_1.typography.weight,
            size: base_1.typography.size,
        }, animation: animation_1.animation,
        easing: animation_1.easing, input: {
            border: inputBorder,
            background: inputBg,
            color: inputTextColor,
            borderRadius: inputBorderRadius,
        }, 
        // UI
        layoutMargin: 10, appBorderColor: appBorderColor,
        appBorderRadius: appBorderRadius,
        // Toolbar default/active colors
        barTextColor: barTextColor, barSelectedColor: barSelectedColor || colorSecondary, barBg: barBg, 
        // Brand logo/text
        brand: {
            title: brandTitle,
            url: brandUrl,
            image: brandImage || (brandTitle ? null : undefined),
        }, code: syntax_1.create({
            colors: base === 'light' ? lightSyntaxColors : darkSyntaxColors,
            mono: fontCode,
        }), 
        // Addon actions theme
        // API example https://github.com/xyc/react-inspector/blob/master/src/styles/themes/chromeLight.js
        addonActionsTheme: __assign({}, (base === 'light' ? react_inspector_1.chromeLight : react_inspector_1.chromeDark), { BASE_FONT_FAMILY: fontCode, BASE_FONT_SIZE: base_1.typography.size.s2 - 1, BASE_LINE_HEIGHT: '18px', BASE_BACKGROUND_COLOR: 'transparent', BASE_COLOR: textColor, ARROW_COLOR: polished_1.opacify(0.2, appBorderColor), ARROW_MARGIN_RIGHT: 4, ARROW_FONT_SIZE: 8, TREENODE_FONT_FAMILY: fontCode, TREENODE_FONT_SIZE: base_1.typography.size.s2 - 1, TREENODE_LINE_HEIGHT: '18px', TREENODE_PADDING_LEFT: 12 }) });
};
